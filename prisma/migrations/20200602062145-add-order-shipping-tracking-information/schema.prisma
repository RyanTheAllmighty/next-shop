// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
    provider = "mysql"
    url = "***"
}

generator client {
    provider = "prisma-client-js"
}

model Product {
    id          Int    @id @default(autoincrement())
    name        String
    slug        String @unique
    description String
    price       Float

    categories   Category[]  @relation(references: [id])
    orderedItems OrderItem[]

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())
}

model Category {
    id          Int    @id @default(autoincrement())
    name        String
    slug        String @unique
    description String

    products Product[] @relation(references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())
}

model Customer {
    id              Int     @id @default(autoincrement())
    firstName       String
    lastName        String
    email           String
    newsletterOptIn Boolean @default(false)

    addresses Address[]
    Order     Order[]

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())
}

model Address {
    id         Int     @id @default(autoincrement())
    primary    Boolean
    firstLine  String
    secondLine String
    suburb     String
    postcode   Int
    state      State

    customer   Customer @relation(fields: [customerId], references: [id])
    customerId Int

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())
    Order     Order[]
}

enum State {
    VIC
    NSW
    SA
    ACT
    NT
    WA
    TAS
    QLD
}

model Order {
    id               Int             @id @default(autoincrement())
    total            Float
    discount         Float           @default(0) // discount percent applied to the order (may want to move to a coupon)
    status           OrderStatus     @default(PAYMENT_PENDING)
    paymentReference String? // Reference number from the payment provider
    paymentProvider  PaymentProvider
    notes            String

    items OrderItem[]

    customer   Customer @relation(fields: [customerId], references: [id])
    customerId Int

    address   Address @relation(fields: [addressId], references: [id])
    addressId Int

    shippingProvider ShippingProvider?
    trackingNumber   String?

    createdAt DateTime  @default(now())
    updatedAt DateTime  @default(now())
    shippedAt DateTime?
}

enum OrderStatus {
    PAYMENT_PENDING
    PAYMENT_RECEIVED
    DISPATCHED
    COMPLETE

    // we may want this to be in a separate field to track returns
    RETURN_STARTED
    RETURN_RECEIVED
    RETURN_REJECTED
    RETURN_DISPATCHED
    RETURNED
}

enum PaymentProvider {
    PAYPAL
    CREDIT_CARD
    AFTERPAY
    ZIPPAY
    LATITUDE_PAY
    BANK_TRANSFER
    CASH
}

enum ShippingProvider {
    AUSTRALIA_POST
    TOLL
    COURIERS_PLEASE
    DHL
    UPS
}

model OrderItem {
    id       Int   @id @default(autoincrement())
    price    Float
    quantity Int

    product   Product @relation(fields: [productId], references: [id])
    productId Int

    order   Order @relation(fields: [orderId], references: [id])
    orderId Int

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())
}
